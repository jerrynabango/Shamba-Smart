[
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "AsyncWebsocketConsumer",
        "importPath": "channels.generic.websocket",
        "description": "channels.generic.websocket",
        "isExtraImport": true,
        "detail": "channels.generic.websocket",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "UserChangeForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserChangeForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "AuthenticationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "user_has_device",
        "importPath": "django_otp",
        "description": "django_otp",
        "isExtraImport": true,
        "detail": "django_otp",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "EmptyPage",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "PageNotAnInteger",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "async_to_sync",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "get_channel_layer",
        "importPath": "channels.layers",
        "description": "channels.layers",
        "isExtraImport": true,
        "detail": "channels.layers",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "ProtocolTypeRouter",
        "importPath": "channels.routing",
        "description": "channels.routing",
        "isExtraImport": true,
        "detail": "channels.routing",
        "documentation": {}
    },
    {
        "label": "URLRouter",
        "importPath": "channels.routing",
        "description": "channels.routing",
        "isExtraImport": true,
        "detail": "channels.routing",
        "documentation": {}
    },
    {
        "label": "AuthMiddlewareStack",
        "importPath": "channels.auth",
        "description": "channels.auth",
        "isExtraImport": true,
        "detail": "channels.auth",
        "documentation": {}
    },
    {
        "label": "websocket_urlpatterns",
        "importPath": "farm.routing",
        "description": "farm.routing",
        "isExtraImport": true,
        "detail": "farm.routing",
        "documentation": {}
    },
    {
        "label": "dj_database_url",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dj_database_url",
        "description": "dj_database_url",
        "detail": "dj_database_url",
        "documentation": {}
    },
    {
        "label": "constants",
        "importPath": "django.contrib.messages",
        "description": "django.contrib.messages",
        "isExtraImport": true,
        "detail": "django.contrib.messages",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "farmhelp.farm.migrations.0001_initial",
        "description": "farmhelp.farm.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Contact',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "farmhelp.farm.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "FarmConfig",
        "kind": 6,
        "importPath": "farmhelp.farm.apps",
        "description": "farmhelp.farm.apps",
        "peekOfCode": "class FarmConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'farm'",
        "detail": "farmhelp.farm.apps",
        "documentation": {}
    },
    {
        "label": "DirectMessageConsumer",
        "kind": 6,
        "importPath": "farmhelp.farm.consumers",
        "description": "farmhelp.farm.consumers",
        "peekOfCode": "class DirectMessageConsumer(AsyncWebsocketConsumer):\n    async def connect(self):\n        self.room_name = self.scope['user'].username\n        self.room_group_name = f'direct_message_{self.room_name}'\n        await self.channel_layer.group_add(\n            self.room_group_name,\n            self.channel_name\n        )\n        await self.accept()\n    async def disconnect(self, close_code):",
        "detail": "farmhelp.farm.consumers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "farmhelp.farm.consumers",
        "description": "farmhelp.farm.consumers",
        "peekOfCode": "User = get_user_model()\nclass DirectMessageConsumer(AsyncWebsocketConsumer):\n    async def connect(self):\n        self.room_name = self.scope['user'].username\n        self.room_group_name = f'direct_message_{self.room_name}'\n        await self.channel_layer.group_add(\n            self.room_group_name,\n            self.channel_name\n        )\n        await self.accept()",
        "detail": "farmhelp.farm.consumers",
        "documentation": {}
    },
    {
        "label": "CustomUserCreationForm",
        "kind": 6,
        "importPath": "farmhelp.farm.forms",
        "description": "farmhelp.farm.forms",
        "peekOfCode": "class CustomUserCreationForm(UserCreationForm):\n    class Meta:\n        model = CustomUser\n        fields = ['username', 'email', 'password1', 'password2',\n                  'profile_picture']\nclass CommentForm(forms.ModelForm):\n    class Meta:\n        model = Comment\n        fields = ['content']\nclass ProfileEditForm(UserChangeForm):",
        "detail": "farmhelp.farm.forms",
        "documentation": {}
    },
    {
        "label": "CommentForm",
        "kind": 6,
        "importPath": "farmhelp.farm.forms",
        "description": "farmhelp.farm.forms",
        "peekOfCode": "class CommentForm(forms.ModelForm):\n    class Meta:\n        model = Comment\n        fields = ['content']\nclass ProfileEditForm(UserChangeForm):\n    class Meta:\n        model = CustomUser\n        fields = ['username', 'email', 'first_name', 'last_name',\n                  'phone_number', 'profile_picture',\n                  'bio', 'location', 'linkedin', 'x', 'facebook', 'whatsapp']",
        "detail": "farmhelp.farm.forms",
        "documentation": {}
    },
    {
        "label": "ProfileEditForm",
        "kind": 6,
        "importPath": "farmhelp.farm.forms",
        "description": "farmhelp.farm.forms",
        "peekOfCode": "class ProfileEditForm(UserChangeForm):\n    class Meta:\n        model = CustomUser\n        fields = ['username', 'email', 'first_name', 'last_name',\n                  'phone_number', 'profile_picture',\n                  'bio', 'location', 'linkedin', 'x', 'facebook', 'whatsapp']\n    phone_number = forms.CharField(max_length=15, required=False)\n    profile_picture = forms.ImageField(required=False)\n    bio = forms.CharField(widget=forms.Textarea, required=False)\n    location = forms.CharField(max_length=255, required=False)",
        "detail": "farmhelp.farm.forms",
        "documentation": {}
    },
    {
        "label": "BlogPostForm",
        "kind": 6,
        "importPath": "farmhelp.farm.forms",
        "description": "farmhelp.farm.forms",
        "peekOfCode": "class BlogPostForm(forms.ModelForm):\n    class Meta:\n        model = BlogPost\n        fields = ['title', 'content']\n# forms.py\nclass MarketListingForm(forms.ModelForm):\n    class Meta:\n        model = MarketListing\n        fields = ['image', 'product_name', 'description', 'price', 'currency',\n                  'status']",
        "detail": "farmhelp.farm.forms",
        "documentation": {}
    },
    {
        "label": "MarketListingForm",
        "kind": 6,
        "importPath": "farmhelp.farm.forms",
        "description": "farmhelp.farm.forms",
        "peekOfCode": "class MarketListingForm(forms.ModelForm):\n    class Meta:\n        model = MarketListing\n        fields = ['image', 'product_name', 'description', 'price', 'currency',\n                  'status']\n    currency = forms.ChoiceField(\n        choices=[('USD', 'USD'), ('KES', 'KES'), ('EUR', 'EUR')],\n        required=True,\n        widget=forms.Select(attrs={'class': 'w-full px-4 py-2 border rounded-md'})\n    )",
        "detail": "farmhelp.farm.forms",
        "documentation": {}
    },
    {
        "label": "DirectMessageForm",
        "kind": 6,
        "importPath": "farmhelp.farm.forms",
        "description": "farmhelp.farm.forms",
        "peekOfCode": "class DirectMessageForm(forms.ModelForm):\n    class Meta:\n        model = DirectMessage\n        fields = ['message']\n        widgets = {\n            'message': forms.Textarea(attrs={'rows': 4, 'cols': 40}),\n        }\nclass OrderForm(forms.ModelForm):\n    class Meta:\n        model = Order",
        "detail": "farmhelp.farm.forms",
        "documentation": {}
    },
    {
        "label": "OrderForm",
        "kind": 6,
        "importPath": "farmhelp.farm.forms",
        "description": "farmhelp.farm.forms",
        "peekOfCode": "class OrderForm(forms.ModelForm):\n    class Meta:\n        model = Order\n        fields = ['quantity', 'name', 'location', 'phone_number']",
        "detail": "farmhelp.farm.forms",
        "documentation": {}
    },
    {
        "label": "CustomUser",
        "kind": 6,
        "importPath": "farmhelp.farm.models",
        "description": "farmhelp.farm.models",
        "peekOfCode": "class CustomUser(AbstractUser):\n    FARMER = 'Farmer'\n    PROFESSIONAL = 'Professional'\n    ROLE_CHOICES = [\n        (FARMER, 'Farmer'),\n        (PROFESSIONAL, 'Professional'),\n    ]\n    role = models.CharField(max_length=50, choices=ROLE_CHOICES,\n                            default=FARMER)\n    profile_picture = models.ImageField(",
        "detail": "farmhelp.farm.models",
        "documentation": {}
    },
    {
        "label": "BlogPost",
        "kind": 6,
        "importPath": "farmhelp.farm.models",
        "description": "farmhelp.farm.models",
        "peekOfCode": "class BlogPost(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    author = models.ForeignKey(CustomUser, on_delete=models.CASCADE)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    views = models.PositiveIntegerField(default=0)\n    reactions = models.PositiveIntegerField(default=0)\n    def __str__(self):\n        return self.title",
        "detail": "farmhelp.farm.models",
        "documentation": {}
    },
    {
        "label": "BlogPostReaction",
        "kind": 6,
        "importPath": "farmhelp.farm.models",
        "description": "farmhelp.farm.models",
        "peekOfCode": "class BlogPostReaction(models.Model):\n    user = models.ForeignKey(settings.AUTH_USER_MODEL,\n                             on_delete=models.CASCADE)\n    blog_post = models.ForeignKey(BlogPost, on_delete=models.CASCADE)\n    reaction_type = models.CharField(max_length=10, choices=REACTION_CHOICES)\n    created_at = models.DateTimeField(auto_now_add=True)\n# Comment\nclass Comment(models.Model):\n    content = models.TextField()\n    author = models.ForeignKey(CustomUser, on_delete=models.CASCADE)",
        "detail": "farmhelp.farm.models",
        "documentation": {}
    },
    {
        "label": "Comment",
        "kind": 6,
        "importPath": "farmhelp.farm.models",
        "description": "farmhelp.farm.models",
        "peekOfCode": "class Comment(models.Model):\n    content = models.TextField()\n    author = models.ForeignKey(CustomUser, on_delete=models.CASCADE)\n    post = models.ForeignKey(\n        BlogPost,\n        on_delete=models.CASCADE,\n        related_name=\"comments\"\n    )\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)",
        "detail": "farmhelp.farm.models",
        "documentation": {}
    },
    {
        "label": "CommentReaction",
        "kind": 6,
        "importPath": "farmhelp.farm.models",
        "description": "farmhelp.farm.models",
        "peekOfCode": "class CommentReaction(models.Model):\n    user = models.ForeignKey(settings.AUTH_USER_MODEL,\n                             on_delete=models.CASCADE)\n    comment = models.ForeignKey(Comment, on_delete=models.CASCADE)\n    reaction_type = models.CharField(max_length=10, choices=REACTION_CHOICES)\n    created_at = models.DateTimeField(auto_now_add=True)\n# Market List\nclass MarketListing(models.Model):\n    product_name = models.CharField(max_length=200)\n    description = models.TextField()",
        "detail": "farmhelp.farm.models",
        "documentation": {}
    },
    {
        "label": "MarketListing",
        "kind": 6,
        "importPath": "farmhelp.farm.models",
        "description": "farmhelp.farm.models",
        "peekOfCode": "class MarketListing(models.Model):\n    product_name = models.CharField(max_length=200)\n    description = models.TextField()\n    price = models.DecimalField(max_digits=10, decimal_places=2)\n    farmer = models.ForeignKey(CustomUser, on_delete=models.CASCADE,\n                               related_name=\"products\")\n    currency = models.CharField(\n        max_length=3,\n        choices=[('USD', 'USD'), ('KES', 'KES'), ('EUR', 'EUR')],\n        default='KES'",
        "detail": "farmhelp.farm.models",
        "documentation": {}
    },
    {
        "label": "DirectMessage",
        "kind": 6,
        "importPath": "farmhelp.farm.models",
        "description": "farmhelp.farm.models",
        "peekOfCode": "class DirectMessage(models.Model):\n    sender = models.ForeignKey(CustomUser, on_delete=models.CASCADE,\n                               related_name='sent_messages')\n    receiver = models.ForeignKey(CustomUser, on_delete=models.CASCADE,\n                                 related_name='received_messages')\n    message = models.TextField()\n    timestamp = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return f\"Message from {self.sender} to {self.receiver}\"\n# Signal for DirectMessage creation",
        "detail": "farmhelp.farm.models",
        "documentation": {}
    },
    {
        "label": "OTP",
        "kind": 6,
        "importPath": "farmhelp.farm.models",
        "description": "farmhelp.farm.models",
        "peekOfCode": "class OTP(models.Model):\n    user = models.OneToOneField(CustomUser, on_delete=models.CASCADE)\n    otp = models.CharField(max_length=6)\n    created_at = models.DateTimeField(auto_now_add=True)\n    def is_expired(self):\n        return timezone.now() > self.created_at + timezone.timedelta(minutes=10)\n# Contact Us\nclass Contact(models.Model):\n    name = models.CharField(max_length=100)\n    email = models.EmailField()",
        "detail": "farmhelp.farm.models",
        "documentation": {}
    },
    {
        "label": "Contact",
        "kind": 6,
        "importPath": "farmhelp.farm.models",
        "description": "farmhelp.farm.models",
        "peekOfCode": "class Contact(models.Model):\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    phone = models.CharField(max_length=15)\n    message = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return f\"Message from {self.name} ({self.email})\"\n# Order\nclass Order(models.Model):",
        "detail": "farmhelp.farm.models",
        "documentation": {}
    },
    {
        "label": "Order",
        "kind": 6,
        "importPath": "farmhelp.farm.models",
        "description": "farmhelp.farm.models",
        "peekOfCode": "class Order(models.Model):\n    product = models.ForeignKey(MarketListing, on_delete=models.CASCADE)\n    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE)\n    quantity = models.PositiveIntegerField()\n    name = models.CharField(max_length=255)\n    location = models.CharField(max_length=255)\n    phone_number = models.CharField(max_length=15)\n    order_date = models.DateTimeField(default=timezone.now)\n    status_choices = [\n        ('Pending Payment', 'Pending Payment'),",
        "detail": "farmhelp.farm.models",
        "documentation": {}
    },
    {
        "label": "TransactionLog",
        "kind": 6,
        "importPath": "farmhelp.farm.models",
        "description": "farmhelp.farm.models",
        "peekOfCode": "class TransactionLog(models.Model):\n    order = models.ForeignKey(Order, on_delete=models.CASCADE)\n    response_code = models.CharField(max_length=5)\n    response_description = models.TextField()\n    transaction_id = models.CharField(max_length=50, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)",
        "detail": "farmhelp.farm.models",
        "documentation": {}
    },
    {
        "label": "notify_user_on_new_message",
        "kind": 2,
        "importPath": "farmhelp.farm.models",
        "description": "farmhelp.farm.models",
        "peekOfCode": "def notify_user_on_new_message(sender, instance, created, **kwargs):\n    if created:\n        print(f\"New message sent from {instance.sender} to {instance.receiver}\")\n# OTP\nclass OTP(models.Model):\n    user = models.OneToOneField(CustomUser, on_delete=models.CASCADE)\n    otp = models.CharField(max_length=6)\n    created_at = models.DateTimeField(auto_now_add=True)\n    def is_expired(self):\n        return timezone.now() > self.created_at + timezone.timedelta(minutes=10)",
        "detail": "farmhelp.farm.models",
        "documentation": {}
    },
    {
        "label": "REACTION_CHOICES",
        "kind": 5,
        "importPath": "farmhelp.farm.models",
        "description": "farmhelp.farm.models",
        "peekOfCode": "REACTION_CHOICES = [\n    ('like', 'Like'),\n    ('dislike', 'Dislike'),\n    ('love', 'Love'),\n]\n# BlogPost\nclass BlogPost(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    author = models.ForeignKey(CustomUser, on_delete=models.CASCADE)",
        "detail": "farmhelp.farm.models",
        "documentation": {}
    },
    {
        "label": "websocket_urlpatterns",
        "kind": 5,
        "importPath": "farmhelp.farm.routing",
        "description": "farmhelp.farm.routing",
        "peekOfCode": "websocket_urlpatterns = [\n    path('ws/direct_message/<str:receiver_username>/',\n         consumers.DirectMessageConsumer.as_asgi()),\n]",
        "detail": "farmhelp.farm.routing",
        "documentation": {}
    },
    {
        "label": "CustomUserSerializer",
        "kind": 6,
        "importPath": "farmhelp.farm.serializers",
        "description": "farmhelp.farm.serializers",
        "peekOfCode": "class CustomUserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = CustomUser\n        fields = ['id', 'username', 'email', 'role', 'profile_picture',\n                  'phone_number', 'bio', 'location', 'linkedin', 'x',\n                  'facebook', 'whatsapp']\nclass BlogPostSerializer(serializers.ModelSerializer):\n    author = CustomUserSerializer(read_only=True)\n    class Meta:\n        model = BlogPost",
        "detail": "farmhelp.farm.serializers",
        "documentation": {}
    },
    {
        "label": "BlogPostSerializer",
        "kind": 6,
        "importPath": "farmhelp.farm.serializers",
        "description": "farmhelp.farm.serializers",
        "peekOfCode": "class BlogPostSerializer(serializers.ModelSerializer):\n    author = CustomUserSerializer(read_only=True)\n    class Meta:\n        model = BlogPost\n        fields = ['id', 'title', 'content', 'author', 'created_at',\n                  'updated_at', 'views', 'reactions']\nclass BlogPostReactionSerializer(serializers.ModelSerializer):\n    user = CustomUserSerializer(read_only=True)\n    blog_post = BlogPostSerializer(read_only=True)\n    class Meta:",
        "detail": "farmhelp.farm.serializers",
        "documentation": {}
    },
    {
        "label": "BlogPostReactionSerializer",
        "kind": 6,
        "importPath": "farmhelp.farm.serializers",
        "description": "farmhelp.farm.serializers",
        "peekOfCode": "class BlogPostReactionSerializer(serializers.ModelSerializer):\n    user = CustomUserSerializer(read_only=True)\n    blog_post = BlogPostSerializer(read_only=True)\n    class Meta:\n        model = BlogPostReaction\n        fields = ['id', 'user', 'blog_post', 'reaction_type', 'created_at']\nclass CommentSerializer(serializers.ModelSerializer):\n    author = CustomUserSerializer(read_only=True)\n    post = BlogPostSerializer(read_only=True)\n    class Meta:",
        "detail": "farmhelp.farm.serializers",
        "documentation": {}
    },
    {
        "label": "CommentSerializer",
        "kind": 6,
        "importPath": "farmhelp.farm.serializers",
        "description": "farmhelp.farm.serializers",
        "peekOfCode": "class CommentSerializer(serializers.ModelSerializer):\n    author = CustomUserSerializer(read_only=True)\n    post = BlogPostSerializer(read_only=True)\n    class Meta:\n        model = Comment\n        fields = ['id', 'content', 'author', 'post', 'created_at',\n                  'updated_at', 'reactions']\nclass CommentReactionSerializer(serializers.ModelSerializer):\n    user = CustomUserSerializer(read_only=True)\n    comment = CommentSerializer(read_only=True)",
        "detail": "farmhelp.farm.serializers",
        "documentation": {}
    },
    {
        "label": "CommentReactionSerializer",
        "kind": 6,
        "importPath": "farmhelp.farm.serializers",
        "description": "farmhelp.farm.serializers",
        "peekOfCode": "class CommentReactionSerializer(serializers.ModelSerializer):\n    user = CustomUserSerializer(read_only=True)\n    comment = CommentSerializer(read_only=True)\n    class Meta:\n        model = CommentReaction\n        fields = ['id', 'user', 'comment', 'reaction_type', 'created_at']\nclass MarketListingSerializer(serializers.ModelSerializer):\n    farmer = CustomUserSerializer(read_only=True)\n    class Meta:\n        model = MarketListing",
        "detail": "farmhelp.farm.serializers",
        "documentation": {}
    },
    {
        "label": "MarketListingSerializer",
        "kind": 6,
        "importPath": "farmhelp.farm.serializers",
        "description": "farmhelp.farm.serializers",
        "peekOfCode": "class MarketListingSerializer(serializers.ModelSerializer):\n    farmer = CustomUserSerializer(read_only=True)\n    class Meta:\n        model = MarketListing\n        fields = ['id', 'product_name', 'description', 'price', 'farmer',\n                  'currency', 'status', 'created_at', 'updated_at', 'image']\nclass DirectMessageSerializer(serializers.ModelSerializer):\n    sender = CustomUserSerializer(read_only=True)\n    receiver = CustomUserSerializer(read_only=True)\n    class Meta:",
        "detail": "farmhelp.farm.serializers",
        "documentation": {}
    },
    {
        "label": "DirectMessageSerializer",
        "kind": 6,
        "importPath": "farmhelp.farm.serializers",
        "description": "farmhelp.farm.serializers",
        "peekOfCode": "class DirectMessageSerializer(serializers.ModelSerializer):\n    sender = CustomUserSerializer(read_only=True)\n    receiver = CustomUserSerializer(read_only=True)\n    class Meta:\n        model = DirectMessage\n        fields = ['id', 'sender', 'receiver', 'message', 'timestamp']\nclass OTPSerializer(serializers.ModelSerializer):\n    user = CustomUserSerializer(read_only=True)\n    class Meta:\n        model = OTP",
        "detail": "farmhelp.farm.serializers",
        "documentation": {}
    },
    {
        "label": "OTPSerializer",
        "kind": 6,
        "importPath": "farmhelp.farm.serializers",
        "description": "farmhelp.farm.serializers",
        "peekOfCode": "class OTPSerializer(serializers.ModelSerializer):\n    user = CustomUserSerializer(read_only=True)\n    class Meta:\n        model = OTP\n        fields = ['id', 'user', 'otp', 'created_at']\nclass ContactSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Contact\n        fields = ['id', 'name', 'email', 'phone', 'message', 'created_at']\nclass OrderSerializer(serializers.ModelSerializer):",
        "detail": "farmhelp.farm.serializers",
        "documentation": {}
    },
    {
        "label": "ContactSerializer",
        "kind": 6,
        "importPath": "farmhelp.farm.serializers",
        "description": "farmhelp.farm.serializers",
        "peekOfCode": "class ContactSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Contact\n        fields = ['id', 'name', 'email', 'phone', 'message', 'created_at']\nclass OrderSerializer(serializers.ModelSerializer):\n    user = CustomUserSerializer(read_only=True)\n    product = MarketListingSerializer(read_only=True)\n    class Meta:\n        model = Order\n        fields = ['id', 'product', 'user', 'quantity', 'name', 'location',",
        "detail": "farmhelp.farm.serializers",
        "documentation": {}
    },
    {
        "label": "OrderSerializer",
        "kind": 6,
        "importPath": "farmhelp.farm.serializers",
        "description": "farmhelp.farm.serializers",
        "peekOfCode": "class OrderSerializer(serializers.ModelSerializer):\n    user = CustomUserSerializer(read_only=True)\n    product = MarketListingSerializer(read_only=True)\n    class Meta:\n        model = Order\n        fields = ['id', 'product', 'user', 'quantity', 'name', 'location',\n                  'phone_number', 'order_date', 'status']",
        "detail": "farmhelp.farm.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "farmhelp.farm.urls",
        "description": "farmhelp.farm.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.home, name='home'),\n    path('register/', views.register, name='register'),\n    path('verify_otp/<int:user_id>/', views.verify_otp, name='verify_otp'),\n    path('resend_otp/<int:user_id>/', views.resend_otp, name='resend_otp'),\n    path('login/', views.login_view, name='login'),\n    path('logout/', views.logout_view, name='logout'),\n    path('about/', views.about, name='about'),\n    path('blog/', views.blog_posts, name='blog_posts'),\n    path('market/', views.market, name='market'),",
        "detail": "farmhelp.farm.urls",
        "documentation": {}
    },
    {
        "label": "generate_otp",
        "kind": 2,
        "importPath": "farmhelp.farm.views",
        "description": "farmhelp.farm.views",
        "peekOfCode": "def generate_otp():\n    return ''.join(random.choices(string.digits, k=6))\n# Registration\ndef register(request):\n    if request.method == 'POST':\n        form = CustomUserCreationForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            # Generate OTP\n            otp = generate_otp()",
        "detail": "farmhelp.farm.views",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "farmhelp.farm.views",
        "description": "farmhelp.farm.views",
        "peekOfCode": "def register(request):\n    if request.method == 'POST':\n        form = CustomUserCreationForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            # Generate OTP\n            otp = generate_otp()\n            OTP.objects.create(user=user, otp=otp)\n            # Send OTP to email\n            send_mail(",
        "detail": "farmhelp.farm.views",
        "documentation": {}
    },
    {
        "label": "verify_otp",
        "kind": 2,
        "importPath": "farmhelp.farm.views",
        "description": "farmhelp.farm.views",
        "peekOfCode": "def verify_otp(request, user_id):\n    user = CustomUser.objects.get(id=user_id)\n    otp_record = OTP.objects.get(user=user)\n    if request.method == 'POST':\n        otp = request.POST.get('otp')\n        if otp == otp_record.otp:\n            if otp_record.is_expired():\n                messages.error(request, 'The OTP has expired. Please request a new one.')\n            else:\n                user.is_active = True",
        "detail": "farmhelp.farm.views",
        "documentation": {}
    },
    {
        "label": "resend_otp",
        "kind": 2,
        "importPath": "farmhelp.farm.views",
        "description": "farmhelp.farm.views",
        "peekOfCode": "def resend_otp(request, user_id):\n    user = CustomUser.objects.get(id=user_id)\n    otp_record = OTP.objects.get(user=user)\n    if otp_record.is_expired():\n        otp = generate_otp()\n        otp_record.otp = otp\n        otp_record.created_at = timezone.now()\n        otp_record.save()\n        send_mail(\n            'Your OTP Code',",
        "detail": "farmhelp.farm.views",
        "documentation": {}
    },
    {
        "label": "login_view",
        "kind": 2,
        "importPath": "farmhelp.farm.views",
        "description": "farmhelp.farm.views",
        "peekOfCode": "def login_view(request):\n    if request.method == 'POST':\n        form = AuthenticationForm(request, data=request.POST)\n        if form.is_valid():\n            user = form.get_user()\n            login(request, user)\n            return redirect('home')\n    else:\n        form = AuthenticationForm()\n    return render(request, 'login.html', {'form': form})",
        "detail": "farmhelp.farm.views",
        "documentation": {}
    },
    {
        "label": "logout_view",
        "kind": 2,
        "importPath": "farmhelp.farm.views",
        "description": "farmhelp.farm.views",
        "peekOfCode": "def logout_view(request):\n    logout(request)\n    return redirect('home')\n# Home\ndef home(request):\n    return render(request, 'home.html')\n# Blogs\n@login_required\ndef blog_posts(request):\n    posts = BlogPost.objects.all()",
        "detail": "farmhelp.farm.views",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "farmhelp.farm.views",
        "description": "farmhelp.farm.views",
        "peekOfCode": "def home(request):\n    return render(request, 'home.html')\n# Blogs\n@login_required\ndef blog_posts(request):\n    posts = BlogPost.objects.all()\n    paginator = Paginator(posts, 5)\n    page_number = request.GET.get('page', 1)\n    try:\n        posts = paginator.page(page_number)",
        "detail": "farmhelp.farm.views",
        "documentation": {}
    },
    {
        "label": "blog_posts",
        "kind": 2,
        "importPath": "farmhelp.farm.views",
        "description": "farmhelp.farm.views",
        "peekOfCode": "def blog_posts(request):\n    posts = BlogPost.objects.all()\n    paginator = Paginator(posts, 5)\n    page_number = request.GET.get('page', 1)\n    try:\n        posts = paginator.page(page_number)\n    except PageNotAnInteger:\n        posts = paginator.page(1)\n    except EmptyPage:\n        posts = paginator.page(paginator.num_pages)",
        "detail": "farmhelp.farm.views",
        "documentation": {}
    },
    {
        "label": "post_detail",
        "kind": 2,
        "importPath": "farmhelp.farm.views",
        "description": "farmhelp.farm.views",
        "peekOfCode": "def post_detail(request, post_id):\n    post = get_object_or_404(BlogPost, id=post_id)\n    post.increase_views()  # Increase view count\n    if request.method == 'POST':\n        comment_form = CommentForm(request.POST)\n        if comment_form.is_valid():\n            comment = comment_form.save(commit=False)\n            comment.post = post\n            comment.author = request.user\n            comment.save()",
        "detail": "farmhelp.farm.views",
        "documentation": {}
    },
    {
        "label": "post_reaction",
        "kind": 2,
        "importPath": "farmhelp.farm.views",
        "description": "farmhelp.farm.views",
        "peekOfCode": "def post_reaction(request, post_id):\n    post = get_object_or_404(BlogPost, id=post_id)\n    reaction_type = request.POST.get('reaction_type')\n    existing_reaction = BlogPostReaction.objects.filter(user=request.user,\n                                                        blog_post=post).first()\n    if existing_reaction:\n        existing_reaction.reaction_type = reaction_type\n        existing_reaction.save()\n    else:\n        BlogPostReaction.objects.create(user=request.user, blog_post=post,",
        "detail": "farmhelp.farm.views",
        "documentation": {}
    },
    {
        "label": "comment_reaction",
        "kind": 2,
        "importPath": "farmhelp.farm.views",
        "description": "farmhelp.farm.views",
        "peekOfCode": "def comment_reaction(request, comment_id):\n    comment = get_object_or_404(Comment, id=comment_id)\n    reaction_type = request.POST.get('reaction_type')\n    existing_reaction = CommentReaction.objects.filter(user=request.user,\n                                                       comment=comment).first()\n    if existing_reaction:\n        existing_reaction.reaction_type = reaction_type\n        existing_reaction.save()\n    else:\n        CommentReaction.objects.create(user=request.user, comment=comment,",
        "detail": "farmhelp.farm.views",
        "documentation": {}
    },
    {
        "label": "add_blog_post",
        "kind": 2,
        "importPath": "farmhelp.farm.views",
        "description": "farmhelp.farm.views",
        "peekOfCode": "def add_blog_post(request):\n    if request.method == 'POST':\n        form = BlogPostForm(request.POST)\n        if form.is_valid():\n            post = form.save(commit=False)\n            post.author = request.user\n            post.save()\n            return redirect('blog_posts')\n    else:\n        form = BlogPostForm()",
        "detail": "farmhelp.farm.views",
        "documentation": {}
    },
    {
        "label": "edit_post",
        "kind": 2,
        "importPath": "farmhelp.farm.views",
        "description": "farmhelp.farm.views",
        "peekOfCode": "def edit_post(request, post_id):\n    post = get_object_or_404(BlogPost, id=post_id)\n    if request.user != post.author and not request.user.is_staff:\n        return redirect('post_detail', post_id=post.id)\n    if request.method == 'POST':\n        form = BlogPostForm(request.POST, instance=post)\n        if form.is_valid():\n            form.save()\n            return redirect('post_detail', post_id=post.id)\n    else:",
        "detail": "farmhelp.farm.views",
        "documentation": {}
    },
    {
        "label": "delete_post",
        "kind": 2,
        "importPath": "farmhelp.farm.views",
        "description": "farmhelp.farm.views",
        "peekOfCode": "def delete_post(request, post_id):\n    post = get_object_or_404(BlogPost, id=post_id)\n    if request.user == post.author:\n        post.delete()\n        messages.success(request, \"Post deleted successfully!\")\n    else:\n        messages.error(request, \"You are not authorized to delete this post.\")\n    return redirect('blog_posts')\n# View other User's Profile\n@login_required",
        "detail": "farmhelp.farm.views",
        "documentation": {}
    },
    {
        "label": "view_profile",
        "kind": 2,
        "importPath": "farmhelp.farm.views",
        "description": "farmhelp.farm.views",
        "peekOfCode": "def view_profile(request, user_id):\n    user = get_object_or_404(CustomUser, id=user_id)\n    return render(request, 'profile_view.html', {'user': user})\n# User's Profile\n@login_required\ndef profile(request):\n    return render(request, 'profile.html', {'user': request.user})\n# User Edit Profile\n@login_required\ndef edit_profile(request):",
        "detail": "farmhelp.farm.views",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": "farmhelp.farm.views",
        "description": "farmhelp.farm.views",
        "peekOfCode": "def profile(request):\n    return render(request, 'profile.html', {'user': request.user})\n# User Edit Profile\n@login_required\ndef edit_profile(request):\n    if request.method == 'POST':\n        form = ProfileEditForm(request.POST, request.FILES,\n                               instance=request.user)\n        if form.is_valid():\n            form.save()",
        "detail": "farmhelp.farm.views",
        "documentation": {}
    },
    {
        "label": "edit_profile",
        "kind": 2,
        "importPath": "farmhelp.farm.views",
        "description": "farmhelp.farm.views",
        "peekOfCode": "def edit_profile(request):\n    if request.method == 'POST':\n        form = ProfileEditForm(request.POST, request.FILES,\n                               instance=request.user)\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'Your profile has been updated successfully.')\n            return redirect('profile')\n    else:\n        form = ProfileEditForm(instance=request.user)",
        "detail": "farmhelp.farm.views",
        "documentation": {}
    },
    {
        "label": "market",
        "kind": 2,
        "importPath": "farmhelp.farm.views",
        "description": "farmhelp.farm.views",
        "peekOfCode": "def market(request):\n    listings = MarketListing.objects.filter(status='Available')\n    return render(request, 'market.html', {'listings': listings})\n# Add Product\n@login_required\ndef add_product(request):\n    if request.method == \"POST\":\n        form = MarketListingForm(request.POST, request.FILES)\n        if form.is_valid():\n            form.instance.farmer = request.user",
        "detail": "farmhelp.farm.views",
        "documentation": {}
    },
    {
        "label": "add_product",
        "kind": 2,
        "importPath": "farmhelp.farm.views",
        "description": "farmhelp.farm.views",
        "peekOfCode": "def add_product(request):\n    if request.method == \"POST\":\n        form = MarketListingForm(request.POST, request.FILES)\n        if form.is_valid():\n            form.instance.farmer = request.user\n            form.save()\n            return redirect('market')\n    else:\n        form = MarketListingForm()\n    return render(request, 'add_product.html', {'form': form})",
        "detail": "farmhelp.farm.views",
        "documentation": {}
    },
    {
        "label": "edit_product",
        "kind": 2,
        "importPath": "farmhelp.farm.views",
        "description": "farmhelp.farm.views",
        "peekOfCode": "def edit_product(request, product_id):\n    listing = get_object_or_404(MarketListing, id=product_id)\n    if listing.farmer != request.user:\n        return redirect('market')\n    if request.method == \"POST\":\n        form = MarketListingForm(request.POST, request.FILES, instance=listing)\n        if form.is_valid():\n            form.save()\n            return redirect('market')\n    else:",
        "detail": "farmhelp.farm.views",
        "documentation": {}
    },
    {
        "label": "delete_product",
        "kind": 2,
        "importPath": "farmhelp.farm.views",
        "description": "farmhelp.farm.views",
        "peekOfCode": "def delete_product(request, product_id):\n    listing = get_object_or_404(MarketListing, id=product_id)\n    if listing.farmer != request.user:\n        return redirect('market')\n    listing.delete()\n    return redirect('market')\n# Direct Message\n@login_required\ndef send_message_user(request, receiver_id):\n    receiver = get_object_or_404(CustomUser, id=receiver_id)",
        "detail": "farmhelp.farm.views",
        "documentation": {}
    },
    {
        "label": "send_message_user",
        "kind": 2,
        "importPath": "farmhelp.farm.views",
        "description": "farmhelp.farm.views",
        "peekOfCode": "def send_message_user(request, receiver_id):\n    receiver = get_object_or_404(CustomUser, id=receiver_id)\n    next_url = request.GET.get('next', 'market')\n    if request.method == 'POST':\n        form = DirectMessageForm(request.POST)\n        if form.is_valid():\n            message = form.save(commit=False)\n            message.sender = request.user\n            message.receiver = receiver\n            message.save()",
        "detail": "farmhelp.farm.views",
        "documentation": {}
    },
    {
        "label": "message_sent",
        "kind": 2,
        "importPath": "farmhelp.farm.views",
        "description": "farmhelp.farm.views",
        "peekOfCode": "def message_sent(request):\n    return render(request, 'message_sent.html')\n# Edit  message\n@login_required\ndef edit_message(request, message_id):\n    message = get_object_or_404(DirectMessage, id=message_id)\n    if message.sender != request.user:\n        return redirect('inbox')\n    if request.method == 'POST':\n        form = DirectMessageForm(request.POST, instance=message)",
        "detail": "farmhelp.farm.views",
        "documentation": {}
    },
    {
        "label": "edit_message",
        "kind": 2,
        "importPath": "farmhelp.farm.views",
        "description": "farmhelp.farm.views",
        "peekOfCode": "def edit_message(request, message_id):\n    message = get_object_or_404(DirectMessage, id=message_id)\n    if message.sender != request.user:\n        return redirect('inbox')\n    if request.method == 'POST':\n        form = DirectMessageForm(request.POST, instance=message)\n        if form.is_valid():\n            form.save()\n            return redirect('sent_messages')\n    else:",
        "detail": "farmhelp.farm.views",
        "documentation": {}
    },
    {
        "label": "inbox",
        "kind": 2,
        "importPath": "farmhelp.farm.views",
        "description": "farmhelp.farm.views",
        "peekOfCode": "def inbox(request):\n    received_messages = DirectMessage.objects.filter(receiver=request.user)\n    return render(request, 'inbox.html', {'messages': received_messages})\n# Sent Message\n@login_required\ndef sent_messages(request):\n    sent_messages = DirectMessage.objects.filter(sender=request.user)\n    return render(request, 'sent_message.html', {'messages': sent_messages})\n# Delete messages\n# @login_required",
        "detail": "farmhelp.farm.views",
        "documentation": {}
    },
    {
        "label": "sent_messages",
        "kind": 2,
        "importPath": "farmhelp.farm.views",
        "description": "farmhelp.farm.views",
        "peekOfCode": "def sent_messages(request):\n    sent_messages = DirectMessage.objects.filter(sender=request.user)\n    return render(request, 'sent_message.html', {'messages': sent_messages})\n# Delete messages\n# @login_required\n# def message_deleted(request, message_id):\n    #return render(request, 'message_deleted.html')\n# Delete Message\n@login_required\ndef delete_message(request, message_id):",
        "detail": "farmhelp.farm.views",
        "documentation": {}
    },
    {
        "label": "delete_message",
        "kind": 2,
        "importPath": "farmhelp.farm.views",
        "description": "farmhelp.farm.views",
        "peekOfCode": "def delete_message(request, message_id):\n    message = get_object_or_404(DirectMessage, id=message_id)\n    if message.sender == request.user:\n        current_page = 'sent_messages'\n    elif message.receiver == request.user:\n        current_page = 'inbox'\n    else:\n        return redirect('permission_denied')\n    message.delete()\n    return redirect(current_page)",
        "detail": "farmhelp.farm.views",
        "documentation": {}
    },
    {
        "label": "reply_message",
        "kind": 2,
        "importPath": "farmhelp.farm.views",
        "description": "farmhelp.farm.views",
        "peekOfCode": "def reply_message(request, message_id):\n    original_message = get_object_or_404(DirectMessage, id=message_id)\n    if request.method == 'POST':\n        form = DirectMessageForm(request.POST)\n        if form.is_valid():\n            new_message = form.save(commit=False)\n            new_message.sender = request.user\n            new_message.receiver = original_message.sender\n            new_message.save()\n            return redirect('inbox')",
        "detail": "farmhelp.farm.views",
        "documentation": {}
    },
    {
        "label": "about",
        "kind": 2,
        "importPath": "farmhelp.farm.views",
        "description": "farmhelp.farm.views",
        "peekOfCode": "def about(request):\n    return render(request, 'about.html')\n# Contact\ndef contact_us(request):\n    if request.method == 'POST':\n        name = request.POST.get('name')\n        email = request.POST.get('email')\n        phone = request.POST.get('phone')\n        message = request.POST.get('message')\n        print(f\"Form Data: Name={name}, Email={email}, Phone={phone}, Message={message}\")",
        "detail": "farmhelp.farm.views",
        "documentation": {}
    },
    {
        "label": "contact_us",
        "kind": 2,
        "importPath": "farmhelp.farm.views",
        "description": "farmhelp.farm.views",
        "peekOfCode": "def contact_us(request):\n    if request.method == 'POST':\n        name = request.POST.get('name')\n        email = request.POST.get('email')\n        phone = request.POST.get('phone')\n        message = request.POST.get('message')\n        print(f\"Form Data: Name={name}, Email={email}, Phone={phone}, Message={message}\")\n        contact = Contact.objects.create(\n            name=name,\n            email=email,",
        "detail": "farmhelp.farm.views",
        "documentation": {}
    },
    {
        "label": "place_order",
        "kind": 2,
        "importPath": "farmhelp.farm.views",
        "description": "farmhelp.farm.views",
        "peekOfCode": "def place_order(request, listing_id):\n    listing = get_object_or_404(MarketListing, id=listing_id)\n    if request.method == 'POST':\n        form = OrderForm(request.POST)\n        if form.is_valid():\n            order = form.save(commit=False)\n            order.product = listing\n            order.user = request.user\n            order.order_status = 'Pending Payment'\n            order.save()",
        "detail": "farmhelp.farm.views",
        "documentation": {}
    },
    {
        "label": "process_payment",
        "kind": 2,
        "importPath": "farmhelp.farm.views",
        "description": "farmhelp.farm.views",
        "peekOfCode": "def process_payment(request):\n    \"\"\"\n    Processes the payment for an order.\n    \"\"\"\n    if request.method == 'POST':\n        try:\n            data = json.loads(request.body)\n            phone_number = data.get('phone_number')\n            quantity = data.get('quantity')\n            name = data.get('name')",
        "detail": "farmhelp.farm.views",
        "documentation": {}
    },
    {
        "label": "initiate_mpesa_payment",
        "kind": 2,
        "importPath": "farmhelp.farm.views",
        "description": "farmhelp.farm.views",
        "peekOfCode": "def initiate_mpesa_payment(phone_number, amount):\n    \"\"\"\n    Initiates the M-Pesa STK Push request.\n    \"\"\"\n    try:\n        # Load credentials from environment variables\n        consumer_key = config('MPESA_CONSUMER_KEY')\n        consumer_secret = config('MPESA_CONSUMER_SECRET')\n        shortcode = config('MPESA_SHORTCODE')\n        passkey = config('MPESA_PASSKEY')",
        "detail": "farmhelp.farm.views",
        "documentation": {}
    },
    {
        "label": "mpesa_callback",
        "kind": 2,
        "importPath": "farmhelp.farm.views",
        "description": "farmhelp.farm.views",
        "peekOfCode": "def mpesa_callback(request):\n    \"\"\"\n    Handles M-Pesa payment callback.\n    \"\"\"\n    try:\n        data = json.loads(request.body.decode('utf-8'))\n        result_code = data['Body']['stkCallback']['ResultCode']\n        checkout_request_id = data['Body']['stkCallback']['CheckoutRequestID']\n        # Update order and log transaction\n        transaction = TransactionLog.objects.get(transaction_id=checkout_request_id)",
        "detail": "farmhelp.farm.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "farmhelp.farm.views",
        "description": "farmhelp.farm.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# Generate OTP\ndef generate_otp():\n    return ''.join(random.choices(string.digits, k=6))\n# Registration\ndef register(request):\n    if request.method == 'POST':\n        form = CustomUserCreationForm(request.POST)\n        if form.is_valid():\n            user = form.save()",
        "detail": "farmhelp.farm.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.asgi",
        "description": "farmhelp.farmhelp.asgi",
        "peekOfCode": "application = ProtocolTypeRouter({\n    \"http\": get_asgi_application(),\n    \"websocket\": AuthMiddlewareStack(\n        URLRouter(websocket_urlpatterns)\n    ),\n})",
        "detail": "farmhelp.farmhelp.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-s53l*ofnk&#a_0@f@dp&%7ghdo^4*s%w@ym%wsb%hv1tagm-m6'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = False\nALLOWED_HOSTS = [\n    '127.0.0.1',\n    'localhost',",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-s53l*ofnk&#a_0@f@dp&%7ghdo^4*s%w@ym%wsb%hv1tagm-m6'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = False\nALLOWED_HOSTS = [\n    '127.0.0.1',\n    'localhost',\n    '2400-102-135-170-235.ngrok-free.app',\n    'farmhelp.onrender.com'\n]\n# Application definition",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "DEBUG = False\nALLOWED_HOSTS = [\n    '127.0.0.1',\n    'localhost',\n    '2400-102-135-170-235.ngrok-free.app',\n    'farmhelp.onrender.com'\n]\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "ALLOWED_HOSTS = [\n    '127.0.0.1',\n    'localhost',\n    '2400-102-135-170-235.ngrok-free.app',\n    'farmhelp.onrender.com'\n]\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'farm',\n    'channels',\n    'allauth',",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "OTP_TTL",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "OTP_TTL = 300\nAUTHENTICATION_BACKENDS = (\n    'django.contrib.auth.backends.ModelBackend',\n    'allauth.account.auth_backends.AuthenticationBackend',\n)\n# Sites Framework setting for Allauth\nSITE_ID = 1\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "AUTHENTICATION_BACKENDS",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "AUTHENTICATION_BACKENDS = (\n    'django.contrib.auth.backends.ModelBackend',\n    'allauth.account.auth_backends.AuthenticationBackend',\n)\n# Sites Framework setting for Allauth\nSITE_ID = 1\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "SITE_ID",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "SITE_ID = 1\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'allauth.account.middleware.AccountMiddleware',",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'allauth.account.middleware.AccountMiddleware',\n    'whitenoise.middleware.WhiteNoiseMiddleware',",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "ROOT_URLCONF = 'farmhelp.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "WSGI_APPLICATION = 'farmhelp.wsgi.application'\nASGI_APPLICATION = 'farm_advice.asgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "ASGI_APPLICATION",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "ASGI_APPLICATION = 'farm_advice.asgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\nAUTH_USER_MODEL = 'farm.CustomUser'",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\nAUTH_USER_MODEL = 'farm.CustomUser'\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'farm.CustomUser'\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\n#STATIC_URL = 'static/'\n#STATICFILES_DIRS = [BASE_DIR / \"static\"]\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\n#STATIC_URL = 'static/'\n#STATICFILES_DIRS = [BASE_DIR / \"static\"]\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATICFILES_DIRS = [",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\n#STATIC_URL = 'static/'\n#STATICFILES_DIRS = [BASE_DIR / \"static\"]\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static')",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\n#STATIC_URL = 'static/'\n#STATICFILES_DIRS = [BASE_DIR / \"static\"]\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static')\n]",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "#STATIC_URL",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "#STATIC_URL = 'static/'\n#STATICFILES_DIRS = [BASE_DIR / \"static\"]\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static')\n]\n# Whitenoise storage for serving static files\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\n# Default primary key field type",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "#STATICFILES_DIRS",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "#STATICFILES_DIRS = [BASE_DIR / \"static\"]\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static')\n]\n# Whitenoise storage for serving static files\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static')\n]\n# Whitenoise storage for serving static files\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static')\n]\n# Whitenoise storage for serving static files\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nMEDIA_URL = '/media/'",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static')\n]\n# Whitenoise storage for serving static files\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_STORAGE",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Messages\nMESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'\nMESSAGE_TAGS = {\n    message_constants.DEBUG: 'alert-info',",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Messages\nMESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'\nMESSAGE_TAGS = {\n    message_constants.DEBUG: 'alert-info',\n    message_constants.INFO: 'alert-info',\n    message_constants.SUCCESS: 'alert-success',\n    message_constants.WARNING: 'alert-warning',",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Messages\nMESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'\nMESSAGE_TAGS = {\n    message_constants.DEBUG: 'alert-info',\n    message_constants.INFO: 'alert-info',\n    message_constants.SUCCESS: 'alert-success',\n    message_constants.WARNING: 'alert-warning',\n    message_constants.ERROR: 'alert-danger',",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Messages\nMESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'\nMESSAGE_TAGS = {\n    message_constants.DEBUG: 'alert-info',\n    message_constants.INFO: 'alert-info',\n    message_constants.SUCCESS: 'alert-success',\n    message_constants.WARNING: 'alert-warning',\n    message_constants.ERROR: 'alert-danger',\n}",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "MESSAGE_STORAGE",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'\nMESSAGE_TAGS = {\n    message_constants.DEBUG: 'alert-info',\n    message_constants.INFO: 'alert-info',\n    message_constants.SUCCESS: 'alert-success',\n    message_constants.WARNING: 'alert-warning',\n    message_constants.ERROR: 'alert-danger',\n}\nCHANNEL_LAYERS = {\n    'default': {",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "MESSAGE_TAGS",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "MESSAGE_TAGS = {\n    message_constants.DEBUG: 'alert-info',\n    message_constants.INFO: 'alert-info',\n    message_constants.SUCCESS: 'alert-success',\n    message_constants.WARNING: 'alert-warning',\n    message_constants.ERROR: 'alert-danger',\n}\nCHANNEL_LAYERS = {\n    'default': {\n        'BACKEND': 'channels_redis.core.RedisChannelLayer',",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "CHANNEL_LAYERS",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "CHANNEL_LAYERS = {\n    'default': {\n        'BACKEND': 'channels_redis.core.RedisChannelLayer',\n        'CONFIG': {\n            \"hosts\": [('127.0.0.1', 6379)],\n        },\n    },\n}\n# Email Backend\nEMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "EMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\nEMAIL_HOST = \"smtp.gmail.com\"\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = \"jnabango@gmail.com\"\nEMAIL_HOST_PASSWORD = 'fxdb mmza zknq taif'\nLOGIN_REDIRECT_URL = 'home'\nACCOUNT_LOGOUT_REDIRECT_URL = 'home'\n# Time\nTIME_ZONE = 'Africa/Nairobi'",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "EMAIL_HOST = \"smtp.gmail.com\"\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = \"jnabango@gmail.com\"\nEMAIL_HOST_PASSWORD = 'fxdb mmza zknq taif'\nLOGIN_REDIRECT_URL = 'home'\nACCOUNT_LOGOUT_REDIRECT_URL = 'home'\n# Time\nTIME_ZONE = 'Africa/Nairobi'\nUSE_TZ = True",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "EMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = \"jnabango@gmail.com\"\nEMAIL_HOST_PASSWORD = 'fxdb mmza zknq taif'\nLOGIN_REDIRECT_URL = 'home'\nACCOUNT_LOGOUT_REDIRECT_URL = 'home'\n# Time\nTIME_ZONE = 'Africa/Nairobi'\nUSE_TZ = True\n# settings.py",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "EMAIL_USE_TLS = True\nEMAIL_HOST_USER = \"jnabango@gmail.com\"\nEMAIL_HOST_PASSWORD = 'fxdb mmza zknq taif'\nLOGIN_REDIRECT_URL = 'home'\nACCOUNT_LOGOUT_REDIRECT_URL = 'home'\n# Time\nTIME_ZONE = 'Africa/Nairobi'\nUSE_TZ = True\n# settings.py\nLOGIN_URL = '/login/'",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "EMAIL_HOST_USER = \"jnabango@gmail.com\"\nEMAIL_HOST_PASSWORD = 'fxdb mmza zknq taif'\nLOGIN_REDIRECT_URL = 'home'\nACCOUNT_LOGOUT_REDIRECT_URL = 'home'\n# Time\nTIME_ZONE = 'Africa/Nairobi'\nUSE_TZ = True\n# settings.py\nLOGIN_URL = '/login/'\n# Safaricom Daraja API credentials",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "EMAIL_HOST_PASSWORD = 'fxdb mmza zknq taif'\nLOGIN_REDIRECT_URL = 'home'\nACCOUNT_LOGOUT_REDIRECT_URL = 'home'\n# Time\nTIME_ZONE = 'Africa/Nairobi'\nUSE_TZ = True\n# settings.py\nLOGIN_URL = '/login/'\n# Safaricom Daraja API credentials\nMPESA_CONSUMER_KEY = '50t2mN7NirbBsqjAu0FvACzJETJGpBGfJMroUGtEYMzHtP7H'",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_REDIRECT_URL",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "LOGIN_REDIRECT_URL = 'home'\nACCOUNT_LOGOUT_REDIRECT_URL = 'home'\n# Time\nTIME_ZONE = 'Africa/Nairobi'\nUSE_TZ = True\n# settings.py\nLOGIN_URL = '/login/'\n# Safaricom Daraja API credentials\nMPESA_CONSUMER_KEY = '50t2mN7NirbBsqjAu0FvACzJETJGpBGfJMroUGtEYMzHtP7H'\nMPESA_CONSUMER_SECRET = 'upGg9DDoyl4nwUa2PYOpIzYAGRsKGJp66rXI4RYbend9j9pZ9pVowI5Ok5F2AjqR'",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_LOGOUT_REDIRECT_URL",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "ACCOUNT_LOGOUT_REDIRECT_URL = 'home'\n# Time\nTIME_ZONE = 'Africa/Nairobi'\nUSE_TZ = True\n# settings.py\nLOGIN_URL = '/login/'\n# Safaricom Daraja API credentials\nMPESA_CONSUMER_KEY = '50t2mN7NirbBsqjAu0FvACzJETJGpBGfJMroUGtEYMzHtP7H'\nMPESA_CONSUMER_SECRET = 'upGg9DDoyl4nwUa2PYOpIzYAGRsKGJp66rXI4RYbend9j9pZ9pVowI5Ok5F2AjqR'\nMPESA_SHORTCODE = '174379'",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "TIME_ZONE = 'Africa/Nairobi'\nUSE_TZ = True\n# settings.py\nLOGIN_URL = '/login/'\n# Safaricom Daraja API credentials\nMPESA_CONSUMER_KEY = '50t2mN7NirbBsqjAu0FvACzJETJGpBGfJMroUGtEYMzHtP7H'\nMPESA_CONSUMER_SECRET = 'upGg9DDoyl4nwUa2PYOpIzYAGRsKGJp66rXI4RYbend9j9pZ9pVowI5Ok5F2AjqR'\nMPESA_SHORTCODE = '174379'\nMPESA_PASSKEY = 'bfb279f9aa9bdbcf158e97dd71a467cd2e0c893059b10f78e6b72ada1ed2c919'\nMPESA_CALLBACK_URL = 'https://2400-102-135-170-235.ngrok-free.app/mpesa/callback'",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "USE_TZ = True\n# settings.py\nLOGIN_URL = '/login/'\n# Safaricom Daraja API credentials\nMPESA_CONSUMER_KEY = '50t2mN7NirbBsqjAu0FvACzJETJGpBGfJMroUGtEYMzHtP7H'\nMPESA_CONSUMER_SECRET = 'upGg9DDoyl4nwUa2PYOpIzYAGRsKGJp66rXI4RYbend9j9pZ9pVowI5Ok5F2AjqR'\nMPESA_SHORTCODE = '174379'\nMPESA_PASSKEY = 'bfb279f9aa9bdbcf158e97dd71a467cd2e0c893059b10f78e6b72ada1ed2c919'\nMPESA_CALLBACK_URL = 'https://2400-102-135-170-235.ngrok-free.app/mpesa/callback'",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_URL",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "LOGIN_URL = '/login/'\n# Safaricom Daraja API credentials\nMPESA_CONSUMER_KEY = '50t2mN7NirbBsqjAu0FvACzJETJGpBGfJMroUGtEYMzHtP7H'\nMPESA_CONSUMER_SECRET = 'upGg9DDoyl4nwUa2PYOpIzYAGRsKGJp66rXI4RYbend9j9pZ9pVowI5Ok5F2AjqR'\nMPESA_SHORTCODE = '174379'\nMPESA_PASSKEY = 'bfb279f9aa9bdbcf158e97dd71a467cd2e0c893059b10f78e6b72ada1ed2c919'\nMPESA_CALLBACK_URL = 'https://2400-102-135-170-235.ngrok-free.app/mpesa/callback'",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "MPESA_CONSUMER_KEY",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "MPESA_CONSUMER_KEY = '50t2mN7NirbBsqjAu0FvACzJETJGpBGfJMroUGtEYMzHtP7H'\nMPESA_CONSUMER_SECRET = 'upGg9DDoyl4nwUa2PYOpIzYAGRsKGJp66rXI4RYbend9j9pZ9pVowI5Ok5F2AjqR'\nMPESA_SHORTCODE = '174379'\nMPESA_PASSKEY = 'bfb279f9aa9bdbcf158e97dd71a467cd2e0c893059b10f78e6b72ada1ed2c919'\nMPESA_CALLBACK_URL = 'https://2400-102-135-170-235.ngrok-free.app/mpesa/callback'",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "MPESA_CONSUMER_SECRET",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "MPESA_CONSUMER_SECRET = 'upGg9DDoyl4nwUa2PYOpIzYAGRsKGJp66rXI4RYbend9j9pZ9pVowI5Ok5F2AjqR'\nMPESA_SHORTCODE = '174379'\nMPESA_PASSKEY = 'bfb279f9aa9bdbcf158e97dd71a467cd2e0c893059b10f78e6b72ada1ed2c919'\nMPESA_CALLBACK_URL = 'https://2400-102-135-170-235.ngrok-free.app/mpesa/callback'",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "MPESA_SHORTCODE",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "MPESA_SHORTCODE = '174379'\nMPESA_PASSKEY = 'bfb279f9aa9bdbcf158e97dd71a467cd2e0c893059b10f78e6b72ada1ed2c919'\nMPESA_CALLBACK_URL = 'https://2400-102-135-170-235.ngrok-free.app/mpesa/callback'",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "MPESA_PASSKEY",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "MPESA_PASSKEY = 'bfb279f9aa9bdbcf158e97dd71a467cd2e0c893059b10f78e6b72ada1ed2c919'\nMPESA_CALLBACK_URL = 'https://2400-102-135-170-235.ngrok-free.app/mpesa/callback'",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "MPESA_CALLBACK_URL",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.settings",
        "description": "farmhelp.farmhelp.settings",
        "peekOfCode": "MPESA_CALLBACK_URL = 'https://2400-102-135-170-235.ngrok-free.app/mpesa/callback'",
        "detail": "farmhelp.farmhelp.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.urls",
        "description": "farmhelp.farmhelp.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('farm.urls')),\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "detail": "farmhelp.farmhelp.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "farmhelp.farmhelp.wsgi",
        "description": "farmhelp.farmhelp.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "farmhelp.farmhelp.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "farmhelp.manage",
        "description": "farmhelp.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'farmhelp.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "farmhelp.manage",
        "documentation": {}
    }
]